openapi: 3.0.0
info:
  title: "Airline Service"
  description: "An api for airline serive platform"
  version: 1.0.0

servers:
  - url: http://localhost:8080/

paths:
  /airlines:
    post:
      tags:
        - Airlines
      description: Endpoint to create new airline company
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                carrierName:
                  type: string
                  example: New Carrier
                headquarters:
                  type: string
                  example: New Headquarters
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  carrierName:
                    type: string
                    example: "sample carrier name"
                  headquarters:
                    type: string
                    example: "sample headquarters name"
        400:
          description: Returns all erros
          content:
            application/json:
              example:
                "errors":
                  {
                    "carrierName": ["Carrier name is required"],
                    "headQuarters": ["Headquarters is required"],
                  }
  /airlines/:
    get:
      tags:
        - Airlines
      description: Endpoint to get all airline company
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                [
                  {
                    "carrierName": "sample carrier name",
                    "headquarters": "sample headquarters",
                  },
                  {
                    "carrierName": "sample carrier name",
                    "headquarters": "sample headquarters",
                  },
                ]
  /airlines/{airlineId}:
    get:
      tags:
        - Airlines
      description: Endpoint to get all airline company
      parameters:
        - in: path
          name: airlineId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Airline Company ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                carrierName:
                  type: string
                  example: New Carrier
                headquarters:
                  type: string
                  example: New Headquarters
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  carrierName:
                    type: string
                    example: "sample carrier name"
                  headquarters:
                    type: string
                    example: "sample headquarters"

  /airlines/{airlineId}/:
    put:
      tags:
        - Airlines
      description: Endpoint to get all airline company
      parameters:
        - in: path
          name: airlineId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Airline Company ID
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  carrierName:
                    type: string
                    example: "sample carrier name"
                  headquarters:
                    type: string
                    example: "sample headquarters"
        400:
          description: Returns all erros
          content:
            application/json:
              example:
                "errors":
                  {
                    "carrierName": ["Carrier name is required"],
                    "headQuarters": ["Headquarters is required"],
                  }

  /airlines/{airlineId}/airplanes:
    post:
      tags:
        - Airplanes
      description: Endpoint to create new airplane
      parameters:
        - in: path
          name: airlineId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Airline ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: New Carrier
                model:
                  type: string
                  example: New Headquarters
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "brand": "Fujidenzo",
                  "model": "H10213",
                  "airplaneCompany":
                    { "carrierName": "test", "headQuarters": "test" },
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                "errors":
                  {
                    "brand": ["Brand is required"],
                    "model": ["Model is required"],
                  }

  /airplanes:
    get:
      tags:
        - Airplanes
      description: Endpoint to get collection of airplanes
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                [
                  {
                    "brand": "Fujidenzo",
                    "model": "H10213",
                    "airplaneCompany":
                      { "carrierName": "test", "headQuarters": "test" },
                  },
                  {
                    "brand": "Fujidenzo",
                    "model": "H10213",
                    "airplaneCompany":
                      { "carrierName": "test", "headQuarters": "test" },
                  },
                ]

  /airplanes/{airplaneId}:
    get:
      tags:
        - Airplanes
      description: Endpoint to get collection of airplanes
      parameters:
        - in: path
          name: airplaneId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Airplane ID
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "brand": "Fujidenzo",
                  "model": "H10213",
                  "airplaneCompany":
                    { "carrierName": "test", "headQuarters": "test" },
                }
  /airplanes/{airplaneId}/:
    put:
      tags:
        - Airplanes
      description: Endpoint to get collection of airplanes
      parameters:
        - in: path
          name: airplaneId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Airplane ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: New Carrier
                model:
                  type: string
                  example: New Headquarters
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "brand": "Fujidenzo",
                  "model": "H10213",
                  "airplaneCompany":
                    { "carrierName": "test", "headQuarters": "test" },
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                "errors":
                  {
                    "brand": ["Brand is required"],
                    "model": ["Model is required"],
                  }

  /destinations:
    post:
      tags:
        - Destinations
      description: Endpoint to create new destination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New York
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "North America" }
        400:
          description: Returns all errors
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }

  /destinations/:
    get:
      tags:
        - Destinations
      description: Endpoint to get all destination
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: [{ "name": "North America" }, { "name": "Asia" }]

  /destinations/{destinationId}:
    get:
      tags:
        - Destinations
      description: Endpoint to get all destination
      parameters:
        - in: path
          name: destinationId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Destination Id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New York
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "North America" }
        400:
          description: Returns all errors
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }

  /destinations/{destinationId}/:
    put:
      tags:
        - Destinations
      description: Endpoint to get all destination
      parameters:
        - in: path
          name: destinationId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Destination Id
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "North America" }

  /passengers:
    post:
      tags:
        - Passengers
      description: Endpoint to create new passenger
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                middlename:
                  type: string
                  example: Middle
                lastname:
                  type: string
                  example: Doe
                age:
                  type: integer
                  example: 29
                gender:
                  type: string
                  example: Male
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "firstName": "John",
                  "middelName": "Middle",
                  "lastName": "Doe",
                  "age": 25,
                  "gender": "Male",
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "firstName": ["First name field is required"],
                      "lastName": ["Last name field is required"],
                      "age": ["Age field is required"],
                      "gender": ["Gender field is required"],
                    },
                }
  /passengers/:
    get:
      tags:
        - Passengers
      description: Endpoint to get all passenger
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                [
                  {
                    "firstName": "John",
                    "middelName": "Middle",
                    "lastName": "Doe",
                    "age": 25,
                    "gender": "Male",
                  },
                  {
                    "firstName": "John",
                    "middelName": "Middle",
                    "lastName": "Doe",
                    "age": 25,
                    "gender": "Male",
                  },
                ]

  /passengers/{passengerId}:
    get:
      tags:
        - Passengers
      description: Endpoint to get all passenger
      parameters:
        - in: path
          name: passengerId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Passenger Id
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "firstName": "John",
                  "middelName": "Middle",
                  "lastName": "Doe",
                  "age": 25,
                  "gender": "Male",
                }
  /passengers/{passengerId}/:
    put:
      tags:
        - Passengers
      description: Endpoint to get all passenger
      parameters:
        - in: path
          name: passengerId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Passenger Id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                middlename:
                  type: string
                  example: Middle
                lastname:
                  type: string
                  example: Doe
                age:
                  type: integer
                  example: 29
                gender:
                  type: string
                  example: Male
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "firstName": "John",
                  "middelName": "Middle",
                  "lastName": "Doe",
                  "age": 25,
                  "gender": "Male",
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "firstName": ["First name field is required"],
                      "lastName": ["Last name field is required"],
                      "age": ["Age field is required"],
                      "gender": ["Gender field is required"],
                    },
                }

  /destinations/{destinationId}/terminals:
    post:
      tags:
        - Terminals
      description: Endpoint to create new terminal
      parameters:
        - in: path
          name: destinationId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Destination ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Terminal 1
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "Terminal 1" }
        400:
          description: Returns all errors
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }

  /terminals:
    get:
      tags:
        - Terminals
      description: Endpoint get all terminal
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: [{ "name": "Terminal 1" }, { "name": "Terminal 1" }]
  /terminals/{terminalId}:
    get:
      tags:
        - Terminals
      description: Endpoint get all terminal
      parameters:
        - in: path
          name: destinationId
          required: true
          schema:
            type: string
            example: 1
          description: Terminal ID
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: { "name": "Terminal 1" }

  /terminals/{terminalId}/:
    put:
      tags:
        - Terminals
      description: Endpoint get all terminal
      parameters:
        - in: path
          name: destinationId
          required: true
          schema:
            type: string
            example: 1
          description: Terminal ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Terminal 1
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: { "name": "Terminal 1" }
        400:
          description: Returns all errors
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }
  /flights:
    post:
      tags:
        - Flights
      description: Endpoint to create a new flight
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationId:
                  type: integer
                  example: 1
                terminalId:
                  type: integer
                  example: 1
                capacity:
                  type: integer
                  example: 20
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "destination": { "name": "North America", "id": 1 },
                  "terminal": { "name": "Test", "id": 1 },
                  "seats": [],
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "destinationId": ["Destination id field is required"],
                      "terminalId": ["Terminal id field is required"],
                      "capacity": ["Capacity field is required"],
                    },
                }
        404:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "destination": ["Destination not found."],
                      "terminal": ["Terminalnot found."],
                    },
                }
  /flights/:
    get:
      tags:
        - Flights
      description: Endpoint to create a new flight
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "destination": { "name": "North America", "id": 1 },
                  "terminal": { "name": "Test", "id": 1 },
                  "seats":
                    [
                      {
                        "passenger":
                          {
                            "firstName": "Airhon Carlo",
                            "lastName": "Cortez",
                            "age": "24",
                            "gender": "Male",
                            "id": 5,
                          },
                        "seatClass": { "name": "economy", "id": 1 },
                        "airplane": { "model": "H10213", "brand": "Fujidenzo" },
                        "status": "occupied",
                        "seatNumber": "DE6JO1",
                      },
                    ],
                }
  /flights/{flightId}:
    get:
      tags:
        - Flights
      description: Endpoint to create a new flight
      parameters:
        - in: path
          name: flightId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Flight Id
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "destination": { "name": "North America", "id": 1 },
                  "terminal": { "name": "Test", "id": 1 },
                  "seats":
                    [
                      {
                        "passenger":
                          {
                            "firstName": "Airhon Carlo",
                            "lastName": "Cortez",
                            "age": "24",
                            "gender": "Male",
                            "id": 5,
                          },
                        "seatClass": { "name": "economy", "id": 1 },
                        "airplane": { "model": "H10213", "brand": "Fujidenzo" },
                        "status": "occupied",
                        "seatNumber": "DE6JO1",
                      },
                    ],
                }

  /flight-seat-classes:
    post:
      tags:
        - Flight Seat Classes
      description: Endpoint to create new flight seat class
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: First Class
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "Business class" }
        400:
          description: Returns all examples
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }
  /flight-seat-classes/:
    get:
      tags:
        - Flight Seat Classes
      description: Endpoint to get all seat class
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: [{ "name": "Business class" }, { "name": "Economy" }]
  /flight-seat-classes/{flightSeatClassId}:
    get:
      tags:
        - Flight Seat Classes
      description: Endpoint to get all seat class
      parameters:
        - in: path
          name: flightSeatClassId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Flight Seat Class Id
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "Economy" }
        400:
          description: Returns all examples
          content:
            application/json:
              example: { "errors": { "name": ["Name is required"] } }

  /flight-seat-classes/{flightSeatClassId}/:
    put:
      tags:
        - Flight Seat Classes
      description: Endpoint to get all seat class
      parameters:
        - in: path
          name: flightSeatClassId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Flight Seat Class Id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: First Class
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example: { "name": "Economy" }

  /flights/{flightId}/book:
    post:
      tags:
        - Flights
      description: Endpoint to book flight
      parameters:
        - in: path
          name: flightId
          required: true
          schema:
            type: string
            example: 1
          description: Enter Flight ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passengerId:
                  type: integer
                  example: 5
                flightSeatClassId:
                  type: integer
                  example: 1
                airplaneId:
                  type: integer
                  example: 1
      responses:
        200:
          description: Returns all examples
          content:
            application/json:
              example:
                {
                  "destination": { "id": "1", "name": "North America" },
                  "passenger":
                    {
                      "id": 2,
                      "firstName": "Airhon Carlo",
                      "lastName": "Cortez",
                      "age": 19,
                      "gender": "Male",
                    },
                  "seatClass": { "id": 1, "name": "Business Class" },
                  "airplane":
                    {
                      "id": 1,
                      "brand": "Toyotoa",
                      "model": "TTOEA13",
                      "airplaneCompany":
                        {
                          "id": 1,
                          "carrierName": "National Airlines",
                          "headQuarters": "Headquarters 5",
                        },
                    },
                }
        400:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "airplaneId": ["Airplane Id field is required"],
                      "passengerId": ["Passenger Id field is required"],
                      "flightSeatClassId":
                        ["Flight seat class Id field is required"],
                    },
                }
        404:
          description: Returns all errors
          content:
            application/json:
              example:
                {
                  "errors":
                    {
                      "airplane": ["Airplane not found."],
                      "passengerId": ["Passenger not found."],
                      "flightSeatClassId": ["Flight seat class not found."],
                    },
                }
